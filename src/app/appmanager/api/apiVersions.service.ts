/**
 * Kathra Applications Manager
 * Kathra Applications Manager
 *
 * OpenAPI spec version: 1.0.0-RC-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiVersion } from '../model/apiVersion';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ApiVersionsService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new ApiVersion via an OpenAPI file
     * 
     * @param componentId The ID of the Component the APIVersion will be created for
     * @param openApiFile The OpenAPI file representing the APIVersion to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createApiVersion(componentId: string, openApiFile?: Blob, observe?: 'body', reportProgress?: boolean): Observable<ApiVersion>;
    public createApiVersion(componentId: string, openApiFile?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiVersion>>;
    public createApiVersion(componentId: string, openApiFile?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiVersion>>;
    public createApiVersion(componentId: string, openApiFile?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (componentId === null || componentId === undefined) {
            throw new Error('Required parameter componentId was null or undefined when calling createApiVersion.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (openApiFile !== undefined) {
            formParams = formParams.append('openApiFile', <any>openApiFile) || formParams;
        }

        return this.httpClient.post<ApiVersion>(`${this.basePath}/components/${encodeURIComponent(String(componentId))}/apiVersions`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the API File from the specified source repository
     * 
     * @param apiVersionId The ID of the requested APIVersion file
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApiFile(apiVersionId: string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getApiFile(apiVersionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getApiFile(apiVersionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getApiFile(apiVersionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiVersionId === null || apiVersionId === undefined) {
            throw new Error('Required parameter apiVersionId was null or undefined when calling getApiFile.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        return this.httpClient.get(`${this.basePath}/apiVersions/${encodeURIComponent(String(apiVersionId))}/apiFile`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the Api Version having the given id
     * 
     * @param apiVersionId The ID of the Api Version to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApiVersionById(apiVersionId: string, observe?: 'body', reportProgress?: boolean): Observable<ApiVersion>;
    public getApiVersionById(apiVersionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiVersion>>;
    public getApiVersionById(apiVersionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiVersion>>;
    public getApiVersionById(apiVersionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiVersionId === null || apiVersionId === undefined) {
            throw new Error('Required parameter apiVersionId was null or undefined when calling getApiVersionById.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ApiVersion>(`${this.basePath}/apiVersions/${encodeURIComponent(String(apiVersionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update ApiVersion via an OpenAPI file
     * 
     * @param apiVersionId The ID of the Component the APIVersion will be created for
     * @param openApiFile The OpenAPI file representing the APIVersion to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateApiVersion(apiVersionId: string, openApiFile?: Blob, observe?: 'body', reportProgress?: boolean): Observable<ApiVersion>;
    public updateApiVersion(apiVersionId: string, openApiFile?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApiVersion>>;
    public updateApiVersion(apiVersionId: string, openApiFile?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApiVersion>>;
    public updateApiVersion(apiVersionId: string, openApiFile?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (apiVersionId === null || apiVersionId === undefined) {
            throw new Error('Required parameter apiVersionId was null or undefined when calling updateApiVersion.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (openApiFile !== undefined) {
            formParams = formParams.append('openApiFile', <any>openApiFile) || formParams;
        }

        return this.httpClient.put<ApiVersion>(`${this.basePath}/apiVersions/${encodeURIComponent(String(apiVersionId))}`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
