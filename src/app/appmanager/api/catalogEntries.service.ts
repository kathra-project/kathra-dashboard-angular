/**
 * Kathra Applications Manager
 * Kathra Applications Manager
 *
 * OpenAPI spec version: 1.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CatalogEntry } from '../model/catalogEntry';
import { CatalogEntryPackage } from '../model/catalogEntryPackage';
import { CatalogEntryTemplate } from '../model/catalogEntryTemplate';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CatalogEntriesService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new entry to catalog from template
     * 
     * @param catalogEntry The catalog entry to create from template
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEntryToCatalogFromTemplate(catalogEntry?: CatalogEntryTemplate, observe?: 'body', reportProgress?: boolean): Observable<CatalogEntry>;
    public addEntryToCatalogFromTemplate(catalogEntry?: CatalogEntryTemplate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CatalogEntry>>;
    public addEntryToCatalogFromTemplate(catalogEntry?: CatalogEntryTemplate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CatalogEntry>>;
    public addEntryToCatalogFromTemplate(catalogEntry?: CatalogEntryTemplate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CatalogEntry>(`${this.basePath}/catalog-entries`,
            catalogEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete the CatalogEntry having the given id
     * 
     * @param catalogEntryId The ID of the CatalogEntry to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCatalogEntryById(catalogEntryId: string, observe?: 'body', reportProgress?: boolean): Observable<CatalogEntry>;
    public deleteCatalogEntryById(catalogEntryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CatalogEntry>>;
    public deleteCatalogEntryById(catalogEntryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CatalogEntry>>;
    public deleteCatalogEntryById(catalogEntryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (catalogEntryId === null || catalogEntryId === undefined) {
            throw new Error('Required parameter catalogEntryId was null or undefined when calling deleteCatalogEntryById.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<CatalogEntry>(`${this.basePath}/catalog-entries/${encodeURIComponent(String(catalogEntryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the catalog entries list
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCatalogEntries(observe?: 'body', reportProgress?: boolean): Observable<Array<CatalogEntry>>;
    public getCatalogEntries(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CatalogEntry>>>;
    public getCatalogEntries(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CatalogEntry>>>;
    public getCatalogEntries(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CatalogEntry>>(`${this.basePath}/catalog-entries`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the CatalogEntry having the given id
     * 
     * @param catalogEntryId The ID of the CatalogEntryId to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCatalogEntry(catalogEntryId: string, observe?: 'body', reportProgress?: boolean): Observable<CatalogEntry>;
    public getCatalogEntry(catalogEntryId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CatalogEntry>>;
    public getCatalogEntry(catalogEntryId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CatalogEntry>>;
    public getCatalogEntry(catalogEntryId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (catalogEntryId === null || catalogEntryId === undefined) {
            throw new Error('Required parameter catalogEntryId was null or undefined when calling getCatalogEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CatalogEntry>(`${this.basePath}/catalog-entries/${encodeURIComponent(String(catalogEntryId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the CatalogEntryPackage having the given ProviderID [latest version]
     * 
     * @param providerId The ProviderId of the CatalogEntryPackage to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCatalogEntryPackageFromProviderId(providerId: string, observe?: 'body', reportProgress?: boolean): Observable<CatalogEntryPackage>;
    public getCatalogEntryPackageFromProviderId(providerId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CatalogEntryPackage>>;
    public getCatalogEntryPackageFromProviderId(providerId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CatalogEntryPackage>>;
    public getCatalogEntryPackageFromProviderId(providerId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling getCatalogEntryPackageFromProviderId.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CatalogEntryPackage>(`${this.basePath}/catalog-entries-packages/${encodeURIComponent(String(providerId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the CatalogEntryPackage having the given ProviderID and version
     * 
     * @param providerId The ProviderId of the CatalogEntryPackage to get
     * @param version The Version of the CatalogEntryPackage to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCatalogEntryPackageFromProviderIdAndVersion(providerId: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<CatalogEntryPackage>;
    public getCatalogEntryPackageFromProviderIdAndVersion(providerId: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CatalogEntryPackage>>;
    public getCatalogEntryPackageFromProviderIdAndVersion(providerId: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CatalogEntryPackage>>;
    public getCatalogEntryPackageFromProviderIdAndVersion(providerId: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling getCatalogEntryPackageFromProviderIdAndVersion.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getCatalogEntryPackageFromProviderIdAndVersion.');
        }

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CatalogEntryPackage>(`${this.basePath}/catalog-entries-packages/${encodeURIComponent(String(providerId))}/versions/${encodeURIComponent(String(version))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all CatalogEntryPackage with ProviderID
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCatalogEntryPackages(observe?: 'body', reportProgress?: boolean): Observable<Array<CatalogEntryPackage>>;
    public getCatalogEntryPackages(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CatalogEntryPackage>>>;
    public getCatalogEntryPackages(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CatalogEntryPackage>>>;
    public getCatalogEntryPackages(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CatalogEntryPackage>>(`${this.basePath}/catalog-entries-packages/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get codegen templates
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCatalogEntryTemplates(observe?: 'body', reportProgress?: boolean): Observable<Array<CatalogEntryTemplate>>;
    public getCatalogEntryTemplates(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CatalogEntryTemplate>>>;
    public getCatalogEntryTemplates(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CatalogEntryTemplate>>>;
    public getCatalogEntryTemplates(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (kathra_auth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CatalogEntryTemplate>>(`${this.basePath}/catalog-entries-templates`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
